% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/these_project.R
\name{these_project}
\alias{these_project}
\title{Vectorized version of \code{\link[=this_project]{this_project()}}}
\usage{
these_project(
  flag,
  project_input,
  ...,
  full_label = FALSE,
  active_only = FALSE,
  hmis_extract = NULL,
  .FY = 24
)
}
\arguments{
\item{flag}{Either \code{"names"}, \code{"groups"}, or \code{"types"}, depending on your
desired output.}

\item{project_input}{Depending on the \strong{flag}:
\itemize{
\item For the \strong{\code{"names"}} flag, the input should be the \code{ProjectID} numbers for which you want the project names.
\item For the \strong{\code{"groups"}} flag, the input should be:
\itemize{
\item the groups of projects (as a character vector) for which you want the project IDs (i.e. \code{c("coc", "yhdp")}).
\item \emph{(NOTE: You can use} \link[=this_project]{this_project("group", "ls")} \emph{if you need the list of valid group strings.)}
}
\item For the \strong{"types"} flag, the input should be:
\itemize{
\item the HMIS \code{ProjectType} CSV Codes to be converted to project type labels/titles;
\item the \code{ProjectID}s for which you want the project types returned; or
\item the project type labels/titles as strings (i.e. \code{"rrh"}/\code{"Rapid Rehousing"}) to get the corresponding CSV Codes; To get the full list of Project Type labels you may run \link[=this_project]{this_project("type", "ls")}.
}
}}

\item{...}{These dots are for future extensions and must be empty.}

\item{full_label}{If set to \code{TRUE} when using the \code{"types"} flag, the
function will return the full tile of the project type instead of the
shorthand label ("Emergency Shelter" instead of "es" ... et cetera).
\emph{\strong{Defaults to \code{FALSE}.}}}

\item{active_only}{If set to \code{TRUE}, this will filter the results to only
return \code{ProjectID}s that are \emph{active} in HMIS (inactive projects are
recorded with a \code{ZZZ} prefix). \emph{\strong{Defaults to \code{FALSE}.}}}

\item{hmis_extract}{The full \verb{CSV Extract} List. This will Automatically use
\code{hmis} if it is in the Global Environment. Otherwise, it will search the
global environment and use the first HMIS extract it finds, or it will call
\link[=load_hmis]{load_hmis("newest")}  and use that if there is no HMIS
extract in the environment to use.}

\item{.FY}{The HMIS Data Standards Fiscal Year (entered numerically with two
digits, i.e., \code{22} for FY22). \emph{\strong{Defaults to FY24.}} Can be set backwards
up to FY22 for backwards compatibility with older HMIS Extracts.}
}
\value{
the project \strong{types}, \strong{names}, or \strong{IDs}.
}
\description{
Returns the \strong{types}, \strong{names}, or \strong{IDs} of the projects, based on the
input into the function.
}
\examples{
\dontrun{
# This will return `"es-nbn"` and `"rrh"`:
these_project("types", c(1, 13))

# This will return `"Emergency Shelter - Night-by-Night"` and `"PH - Rapid Re-Housing"`:
these_project("types", c(1, 13), full_label = TRUE)

# This will return `1` and `13`:
these_project("types", c("es-nbn", "rrh"))

# This will return all ACTIVE CoC & YHDP ProjectIDs:
these_project("groups", c("coc", "yhdp"), active_only = TRUE)

# This will add a `Project.Name` column to the data frame named entry:
hmis <- load_hmis("newest")
entry <- hmis$entry
entry <- entry |>
  dplyr::mutate(Project.Name = these_project("names", ProjectID))
}
}
